     1                                  ; naskfunc
     2                                  ; TAB=4
     3                                  
     4                                  section .text
     5                                  		GLOBAL	io_hlt, io_cli, io_sti, io_stihlt
     6                                  		GLOBAL	io_in8,  io_in16,  io_in32
     7                                  		GLOBAL	io_out8, io_out16, io_out32
     8                                  		GLOBAL	io_load_eflags, io_store_eflags
     9                                  		GLOBAL  load_gdtr, load_idtr, load_cr0, store_cr0
    10                                  		GLOBAL  asm_inthandler20, asm_inthandler21, asm_inthandler27, asm_inthandler2c
    11                                  		GLOBAL  memtest_sub
    12                                  		EXTERN  inthandler20, inthandler21, inthandler27, inthandler2c
    13                                  
    14                                  io_hlt:	; void io_hlt(void);
    15 00000000 F4                      		HLT
    16 00000001 C3                      		RET
    17                                  
    18                                  io_cli:	; void io_cli(void);
    19 00000002 FA                      		CLI
    20 00000003 C3                      		RET
    21                                  
    22                                  io_sti:	; void io_sti(void);
    23 00000004 FB                      		STI
    24 00000005 C3                      		RET
    25                                  
    26                                  io_stihlt:	; void io_stihlt(void);
    27 00000006 FB                      		STI
    28 00000007 F4                      		HLT
    29 00000008 C3                      		RET
    30                                  
    31                                  io_in8:	; int io_in8(int port);
    32 00000009 8B542404                		MOV		EDX,[ESP+4]		; port
    33 0000000D B800000000              		MOV		EAX,0
    34 00000012 EC                      		IN		AL,DX
    35 00000013 C3                      		RET
    36                                  
    37                                  io_in16:	; int io_in16(int port);
    38 00000014 8B542404                		MOV		EDX,[ESP+4]		; port
    39 00000018 B800000000              		MOV		EAX,0
    40 0000001D 66ED                    		IN		AX,DX
    41 0000001F C3                      		RET
    42                                  
    43                                  io_in32:	; int io_in32(int port);
    44 00000020 8B542404                		MOV		EDX,[ESP+4]		; port
    45 00000024 ED                      		IN		EAX,DX
    46 00000025 C3                      		RET
    47                                  
    48                                  io_out8:	; void io_out8(int port, int data);
    49 00000026 8B542404                		MOV		EDX,[ESP+4]		; port
    50 0000002A 8A442408                		MOV		AL,[ESP+8]		; data
    51 0000002E EE                      		OUT		DX,AL
    52 0000002F C3                      		RET
    53                                  
    54                                  io_out16:	; void io_out16(int port, int data);
    55 00000030 8B542404                		MOV		EDX,[ESP+4]		; port
    56 00000034 8B442408                		MOV		EAX,[ESP+8]		; data
    57 00000038 66EF                    		OUT		DX,AX
    58 0000003A C3                      		RET
    59                                  
    60                                  io_out32:	; void io_out32(int port, int data);
    61 0000003B 8B542404                		MOV		EDX,[ESP+4]		; port
    62 0000003F 8B442408                		MOV		EAX,[ESP+8]		; data
    63 00000043 EF                      		OUT		DX,EAX
    64 00000044 C3                      		RET
    65                                  
    66                                  io_load_eflags:	; int io_load_eflags(void);
    67 00000045 9C                      		PUSHFD		; PUSH EFLAGS �Ƃ����Ӗ�
    68 00000046 58                      		POP		EAX
    69 00000047 C3                      		RET
    70                                  
    71                                  io_store_eflags:	; void io_store_eflags(int eflags);
    72 00000048 8B442404                		MOV		EAX,[ESP+4]
    73 0000004C 50                      		PUSH	EAX
    74 0000004D 9D                      		POPFD		; POP EFLAGS �Ƃ����Ӗ�
    75 0000004E C3                      		RET
    76                                  
    77                                  load_gdtr:		; void load_gdtr(int limit, int addr);
    78 0000004F 668B442404              		MOV		AX,[ESP+4]		; limit
    79 00000054 6689442406              		MOV		[ESP+6],AX
    80 00000059 0F01542406              		LGDT	[ESP+6]
    81 0000005E C3                      		RET
    82                                  
    83                                  load_idtr:		; void load_idtr(int limit, int addr);
    84 0000005F 668B442404              		MOV		AX,[ESP+4]		; limit
    85 00000064 6689442406              		MOV		[ESP+6],AX
    86 00000069 0F015C2406              		LIDT	[ESP+6]
    87 0000006E C3                      		RET
    88                                  
    89                                  asm_inthandler21:
    90 0000006F 06                      		PUSH	ES
    91 00000070 1E                      		PUSH	DS
    92 00000071 60                      		PUSHAD
    93 00000072 89E0                    		MOV		EAX,ESP
    94 00000074 50                      		PUSH	EAX ; レジスタを番地のメモリに退避
    95 00000075 668CD0                  		MOV		AX,SS
    96 00000078 8ED8                    		MOV		DS,AX
    97 0000007A 8EC0                    		MOV		ES,AX
    98 0000007C E8(00000000)            		CALL	inthandler21
    99 00000081 58                      		POP		EAX
   100 00000082 61                      		POPAD
   101 00000083 1F                      		POP		DS
   102 00000084 07                      		POP		ES
   103 00000085 CF                      		IRETD ; 割り込みからの復帰
   104                                  
   105                                  asm_inthandler27:
   106 00000086 06                      		PUSH	ES
   107 00000087 1E                      		PUSH	DS
   108 00000088 60                      		PUSHAD
   109 00000089 89E0                    		MOV		EAX,ESP
   110 0000008B 50                      		PUSH	EAX
   111 0000008C 668CD0                  		MOV		AX,SS
   112 0000008F 8ED8                    		MOV		DS,AX
   113 00000091 8EC0                    		MOV		ES,AX
   114 00000093 E8(00000000)            		CALL	inthandler27
   115 00000098 58                      		POP		EAX
   116 00000099 61                      		POPAD
   117 0000009A 1F                      		POP		DS
   118 0000009B 07                      		POP		ES
   119 0000009C CF                      		IRETD
   120                                  
   121                                  asm_inthandler2c:
   122 0000009D 06                      		PUSH	ES
   123 0000009E 1E                      		PUSH	DS
   124 0000009F 60                      		PUSHAD
   125 000000A0 89E0                    		MOV		EAX,ESP
   126 000000A2 50                      		PUSH	EAX
   127 000000A3 668CD0                  		MOV		AX,SS
   128 000000A6 8ED8                    		MOV		DS,AX
   129 000000A8 8EC0                    		MOV		ES,AX
   130 000000AA E8(00000000)            		CALL	inthandler2c
   131 000000AF 58                      		POP		EAX
   132 000000B0 61                      		POPAD
   133 000000B1 1F                      		POP		DS
   134 000000B2 07                      		POP		ES
   135 000000B3 CF                      		IRETD
   136                                  
   137                                  load_cr0:
   138 000000B4 0F20C0                  		MOV 	EAX,CR0
   139 000000B7 C3                      		RET
   140                                  
   141                                  store_cr0: ; void store_cr0(int cr0);
   142 000000B8 8B442404                		MOV 	EAX,[ESP+4]
   143 000000BC 0F22C0                  		MOV 	CR0,EAX
   144                                  
   145                                  ; コンパイラの最適化防止。
   146                                  memtest_sub: ; unsigned int memset_sub(unsigned int start, unsigned int end)
   147 000000BF 57                      		PUSH 	EDI ; EBX, ESI, EDIを使いたいため。(使いたいレジスタがあったらPUSHしとけばいい？)
   148 000000C0 56                      		PUSH 	ESI
   149 000000C1 53                      		PUSH 	EBX
   150 000000C2 BE55AA55AA              		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   151 000000C7 BFAA55AA55              		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   152 000000CC 8B442410                		MOV		EAX,[ESP+12+4]			; i = start;
   153                                  mts_loop:
   154 000000D0 89C3                    		MOV		EBX,EAX
   155 000000D2 81C3FC0F0000            		ADD		EBX,0xffc				; p = i + 0xffc;
   156 000000D8 8B13                    		MOV		EDX,[EBX]				; old = *p;
   157 000000DA 8933                    		MOV		[EBX],ESI				; *p = pat0;
   158 000000DC 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   159 000000DF 3B3B                    		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   160 000000E1 7518                    		JNE		mts_fin
   161 000000E3 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   162 000000E6 3B33                    		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   163 000000E8 7511                    		JNE		mts_fin
   164 000000EA 8913                    		MOV		[EBX],EDX				; *p = old;
   165 000000EC 0500100000              		ADD		EAX,0x1000				; i += 0x1000;
   166 000000F1 3B442414                		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   167 000000F5 76D9                    		JBE		mts_loop
   168 000000F7 5B                      		POP		EBX
   169 000000F8 5E                      		POP		ESI
   170 000000F9 5F                      		POP		EDI
   171 000000FA C3                      		RET
   172                                  mts_fin:
   173 000000FB 8913                    		MOV		[EBX],EDX				; *p = old;
   174 000000FD 5B                      		POP		EBX
   175 000000FE 5E                      		POP		ESI
   176 000000FF 5F                      		POP		EDI
   177 00000100 C3                      		RET
   178                                  
   179                                  ; 割り込みハンドラ。
   180                                  ; レジスタを退避。別objectfileにあるinthandler20を呼び、割り込み終了のIRETDを呼ぶ。
   181                                  asm_inthandler20:
   182 00000101 06                      		PUSH	ES
   183 00000102 1E                      		PUSH	DS
   184 00000103 60                      		PUSHAD
   185 00000104 89E0                    		MOV		EAX,ESP
   186 00000106 50                      		PUSH	EAX
   187 00000107 668CD0                  		MOV		AX,SS
   188 0000010A 8ED8                    		MOV		DS,AX
   189 0000010C 8EC0                    		MOV		ES,AX
   190 0000010E E8(00000000)            		CALL	inthandler20
   191 00000113 58                      		POP		EAX
   192 00000114 61                      		POPAD
   193 00000115 1F                      		POP		DS
   194 00000116 07                      		POP		ES
   195 00000117 CF                      		IRETD
